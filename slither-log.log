'npx hardhat clean' running (wd: ./omron-contracts)
'npx hardhat clean --global' running (wd: ./omron-contracts)
'npx hardhat compile --force' running (wd: ./omron-contracts)
INFO:Detectors:
Reentrancy in OmronDeposit.setClaimManager(address) (contracts/OmronDeposit.sol#177-209):
	External calls:
	- _revokeApprovalSuccess = token.approve(claimManager,0) (contracts/OmronDeposit.sol#187)
	- _setApprovalSuccess = token.approve(_newClaimManager,type()(uint256).max) (contracts/OmronDeposit.sol#193-196)
	State variables written after the call(s):
	- claimManager = _newClaimManager (contracts/OmronDeposit.sol#206)
	OmronDeposit.claimManager (contracts/OmronDeposit.sol#66) can be used in cross function reentrancies:
	- OmronDeposit.claimManager (contracts/OmronDeposit.sol#66)
	- OmronDeposit.setClaimManager(address) (contracts/OmronDeposit.sol#177-209)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
OmronDeposit.setClaimManager(address) (contracts/OmronDeposit.sol#177-209) has external calls inside a loop: _revokeApprovalSuccess = token.approve(claimManager,0) (contracts/OmronDeposit.sol#187)
OmronDeposit.setClaimManager(address) (contracts/OmronDeposit.sol#177-209) has external calls inside a loop: _setApprovalSuccess = token.approve(_newClaimManager,type()(uint256).max) (contracts/OmronDeposit.sol#193-196)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in OmronDeposit.setClaimManager(address) (contracts/OmronDeposit.sol#177-209):
	External calls:
	- _revokeApprovalSuccess = token.approve(claimManager,0) (contracts/OmronDeposit.sol#187)
	- _setApprovalSuccess = token.approve(_newClaimManager,type()(uint256).max) (contracts/OmronDeposit.sol#193-196)
	Event emitted after the call(s):
	- ClaimManagerSet(_newClaimManager) (contracts/OmronDeposit.sol#208)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
OmronDeposit.setDepositStopTime(uint256) (contracts/OmronDeposit.sol#215-225) uses timestamp for comparisons
	Dangerous comparisons:
	- _newDepositStopTime < block.timestamp (contracts/OmronDeposit.sol#221)
OmronDeposit._updatePoints(OmronDeposit.UserInfo) (contracts/OmronDeposit.sol#436-450) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > depositStopTime && depositStopTime != 0 (contracts/OmronDeposit.sol#441)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['0.8.21', '>=0.4.22<0.9.0', '^0.8.0', '^0.8.20', '^0.8.21']
	- 0.8.21 (contracts/OmronDeposit.sol#2)
	- 0.8.21 (contracts/interfaces/IERC20Min.sol#2)
	- 0.8.21 (contracts/interfaces/IOmronDeposit.sol#2)
	- >=0.4.22<0.9.0 (node_modules/hardhat/console.sol#2)
	- ^0.8.0 (contracts/interfaces/IClaimManager.sol#3)
	- ^0.8.0 (contracts/mock/FuzzTest.sol#2)
	- ^0.8.0 (contracts/mock/MockClaim.sol#3)
	- ^0.8.0 (contracts/mock/ReentrancyAttack.sol#2)
	- ^0.8.0 (contracts/mock/tstETH.sol#2)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#3)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Pausable.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#4)
	- ^0.8.21 (contracts/mock/brokenERC20.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Pragma version0.8.21 (contracts/OmronDeposit.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
solc-0.8.21 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Parameter OmronDeposit.addWhitelistedToken(address)._tokenAddress (contracts/OmronDeposit.sol#155) is not in mixedCase
Parameter OmronDeposit.setClaimEnabled(bool)._enabled (contracts/OmronDeposit.sol#168) is not in mixedCase
Parameter OmronDeposit.setClaimManager(address)._newClaimManager (contracts/OmronDeposit.sol#177) is not in mixedCase
Parameter OmronDeposit.setDepositStopTime(uint256)._newDepositStopTime (contracts/OmronDeposit.sol#216) is not in mixedCase
Parameter OmronDeposit.getUserInfo(address)._userAddress (contracts/OmronDeposit.sol#297) is not in mixedCase
Parameter OmronDeposit.calculatePoints(address)._userAddress (contracts/OmronDeposit.sol#331) is not in mixedCase
Parameter OmronDeposit.tokenBalance(address,address)._userAddress (contracts/OmronDeposit.sol#348) is not in mixedCase
Parameter OmronDeposit.tokenBalance(address,address)._tokenAddress (contracts/OmronDeposit.sol#349) is not in mixedCase
Parameter OmronDeposit.deposit(address,uint256)._tokenAddress (contracts/OmronDeposit.sol#363) is not in mixedCase
Parameter OmronDeposit.deposit(address,uint256)._amount (contracts/OmronDeposit.sol#364) is not in mixedCase
Parameter OmronDeposit.claim(address)._userAddress (contracts/OmronDeposit.sol#394) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Loop condition i < allWhitelistedTokens.length (contracts/OmronDeposit.sol#182) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length
INFO:Slither:. analyzed (24 contracts with 94 detectors), 21 result(s) found
